//using Colossal.Menu;
//using Colossal.Patches;
//using HarmonyLib;
//using Photon.Pun;
//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;
//using UnityEngine;
//using UnityEngine.XR;
//using Valve.VR;

//namespace Colossal.Mods
//{
//    public class SSPenis : MonoBehaviour
//    {
//        private GameObject pointer;
//        private LineRenderer radiusLine;
//        private Material lineMaterial = new Material(Shader.Find("GUI/Text Shader"));

//        private float projDebounce;
//        PaperPlaneThrowable funnyplane;
//        public void Start()
//        {
//            funnyplane = GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/RigAnchor/rig/body/shoulder.L/upper_arm.L/forearm.L/TransferrableItemLeftArm/DropZoneAnchor/PaperAirplaneAnchor(Clone)/LMAHY.").GetComponent<PaperPlaneThrowable>();
//        }
//        public void Update()
//        {
//            if (PluginConfig.sspenisgun && PhotonNetwork.InRoom)
//            {
//                switch (PluginConfig.BeamColour)
//                {
//                    case 0:
//                        lineMaterial.color = new Color(0.6f, 0f, 0.8f, 0.5f);
//                        break;
//                    case 1:
//                        lineMaterial.color = new Color(1f, 0f, 0f, 0.5f);
//                        break;
//                    case 2:
//                        lineMaterial.color = new Color(1f, 1f, 0f, 0.5f);
//                        break;
//                    case 3:
//                        lineMaterial.color = new Color(0f, 1f, 0f, 0.5f);
//                        break;
//                    case 4:
//                        lineMaterial.color = new Color(0f, 0f, 1f, 0.5f);
//                        break;
//                }

//                if (pointer == null)
//                {
//                    pointer = GameObject.CreatePrimitive(PrimitiveType.Sphere);
//                    UnityEngine.Object.Destroy(pointer.GetComponent<Rigidbody>());
//                    UnityEngine.Object.Destroy(pointer.GetComponent<SphereCollider>());
//                    pointer.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
//                    pointer.GetComponent<Renderer>().material = WhatAmI.purpleMat;
//                }


//                RaycastHit raycastHit2;
//                LayerMask combinedLayerMask = GorillaLocomotion.GTPlayer.Instance.locomotionEnabledLayers | 16384;
//                Physics.Raycast(GorillaLocomotion.GTPlayer.Instance.rightControllerTransform.position - GorillaLocomotion.GTPlayer.Instance.rightControllerTransform.up, -GorillaLocomotion.GTPlayer.Instance.rightControllerTransform.up, out raycastHit2, float.PositiveInfinity, combinedLayerMask);
//                pointer.transform.position = raycastHit2.point;


//                string bind = CustomBinding.GetBinds("sspenisgun");
//                if (string.IsNullOrEmpty(bind) || bind == "UNBOUND")
//                {
//                    return;
//                }

//                Vector3 pointerPosition = pointer.transform.position; // Use pointer position
//                Quaternion spawnRotation = Quaternion.identity; // Keep upright orientation

//                // Define offsets for a simple 2D penis shape
//                Vector3[] offsets = new Vector3[]
//                {
//                            new Vector3(-0.1f,  0.3f, 0), // Left ball
//                            new Vector3( 0.1f,  0.3f, 0), // Right ball
//                            new Vector3( 0.0f,  0.2f, 0), // Shaft lower
//                            new Vector3( 0.0f,  0.4f, 0), // Shaft middle
//                            new Vector3( 0.0f,  0.6f, 0), // Shaft upper
//                            new Vector3( 0.0f,  0.8f, 0), // Tip
//                };

//                foreach (Vector3 offset in offsets)
//                {
//                    Vector3 spawnPosition = pointerPosition + offset; // Offset relative to pointer
//                    Vector3 velocity = new Vector3(0, 2f, 0); // Move upwards

//                    ((PhotonEvent)Traverse.Create(funnyplane).Field("gLaunchRPC").GetValue()).RaiseAll(new object[]
//                    {
//                                GorillaTagger.Instance.myVRRig.ViewID,
//                                spawnPosition,
//                                spawnRotation,
//                                velocity
//                    });
//                }

//                //if (ControlsV2.GetControl(bind))
//                //{
//                //    if (radiusLine == null)
//                //    {
//                //        radiusLine = new GameObject("RadiusLine")
//                //        {
//                //            transform =
//                //            {
//                //                parent = pointer.transform
//                //            }
//                //        }.AddComponent<LineRenderer>();
//                //        radiusLine.positionCount = 2;
//                //        radiusLine.startWidth = 0.05f;
//                //        radiusLine.endWidth = 0.05f;
//                //        radiusLine.material = lineMaterial;
//                //        radiusLine.startColor = lineMaterial.color;
//                //        radiusLine.endColor = lineMaterial.color;
//                //    }
//                //    radiusLine.SetPosition(0, raycastHit2.point);
//                //    radiusLine.SetPosition(1, GorillaLocomotion.GTPlayer.Instance.rightControllerTransform.position);
//                //    radiusLine.GetPosition(0);

//                //    switch (PluginConfig.AntiScreenShare)
//                //    {
//                //        case 1:
//                //            if (radiusLine.gameObject.layer != 25)
//                //            {
//                //                radiusLine.gameObject.layer = 25;
//                //            }
//                //            break;
//                //        case 2:
//                //            if (radiusLine.gameObject.layer != 16)
//                //            {
//                //                radiusLine.gameObject.layer = 16;
//                //            }
//                //            break;
//                //    }

//                //    if (Time.time > projDebounce)
//                //    {
//                //        projDebounce = Time.time + 0.1f;

//                //        Vector3 pointerPosition = pointer.transform.position; // Use pointer position
//                //        Quaternion spawnRotation = Quaternion.identity; // Keep upright orientation

//                //        // Define offsets for a simple 2D penis shape
//                //        Vector3[] offsets = new Vector3[]
//                //        {
//                //            new Vector3(-0.1f,  0.3f, 0), // Left ball
//                //            new Vector3( 0.1f,  0.3f, 0), // Right ball
//                //            new Vector3( 0.0f,  0.2f, 0), // Shaft lower
//                //            new Vector3( 0.0f,  0.4f, 0), // Shaft middle
//                //            new Vector3( 0.0f,  0.6f, 0), // Shaft upper
//                //            new Vector3( 0.0f,  0.8f, 0), // Tip
//                //        };

//                //        foreach (Vector3 offset in offsets)
//                //        {
//                //            Vector3 spawnPosition = pointerPosition + offset; // Offset relative to pointer
//                //            Vector3 velocity = new Vector3(0, 2f, 0); // Move upwards

//                //            ((PhotonEvent)Traverse.Create(funnyplane).Field("gLaunchRPC").GetValue()).RaiseAll(new object[]
//                //            {
//                //                GorillaTagger.Instance.myVRRig.ViewID,
//                //                spawnPosition,
//                //                spawnRotation,
//                //                velocity
//                //            });
//                //        }
//                //    }
//                //    return;
//                //}

//                if (radiusLine != null)
//                {
//                    UnityEngine.Object.Destroy(radiusLine);
//                    radiusLine = null;
//                    return;
//                }
//            }
//            else
//            {
//                UnityEngine.Object.Destroy(this.GetComponent<SSPenis>());
//                if (pointer != null)
//                {
//                    UnityEngine.Object.Destroy(pointer);
//                }
//            }
//        }
//    }
//}
