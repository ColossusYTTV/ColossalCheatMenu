﻿using Colossal.Menu;
using Colossal.Patches;
using Photon.Pun;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine;
using Colossal.Mods;
using Colossal;

namespace Colossal.Mods
{
    public class SSPlatforms : MonoBehaviour
    {
        private List<GameObject> MonkeyeAIs = new List<GameObject>();
        private GameObject pointer = null;
        private Dictionary<VRRig, GameObject> LeftHandMonkeyMap = new Dictionary<VRRig, GameObject>(); // VRRig, monkeye for left hand
        private Dictionary<VRRig, GameObject> RightHandMonkeyMap = new Dictionary<VRRig, GameObject>(); // VRRig, monkeye for right hand
        private VRRig vrrigComponent;

        private List<GameObject> AvailableLeftHandMonkeys = new List<GameObject>(); // Available monkeys for left hand
        private List<GameObject> AvailableRightHandMonkeys = new List<GameObject>(); // Available monkeys for right hand

        private RaycastHit raycastHit;

        private Color beamColour;
        public void Update()
        {
            if (PluginConfig.SSPlatforms && PhotonNetwork.InRoom)
            {
                if (PhotonNetwork.LocalPlayer.IsMasterClient)
                {
                    // Find and disable Monkeye AIs if not already in the list
                    AddMonkeyeAIToList("Environment Objects/05Maze_PersistentObjects/BasementMaze/Monkeye_Prefab_Angry");
                    AddMonkeyeAIToList("Environment Objects/05Maze_PersistentObjects/BasementMaze/Monkeye_Prefab_Tweaky");
                    AddMonkeyeAIToList("Environment Objects/05Maze_PersistentObjects/BasementMaze/Monkeye_Prefab_Sleepy");
                    AddMonkeyeAIToList("Environment Objects/05Maze_PersistentObjects/BasementMaze/Monkeye_Prefab_Keen");


                    switch (PluginConfig.BeamColour)
                    {
                        case 0: beamColour = new Color(0.6f, 0f, 0.8f, 0.5f); break; // Purple
                        case 1: beamColour = new Color(1f, 0f, 0f, 0.5f); break;    // Red
                        case 2: beamColour = new Color(1f, 1f, 0f, 0.5f); break;    // Yellow
                        case 3: beamColour = new Color(0f, 1f, 0f, 0.5f); break;    // Green
                        case 4: beamColour = new Color(0f, 0f, 1f, 0.5f); break;    // Blue
                    }


                    if (pointer == null)
                    {
                        pointer = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                        UnityEngine.Object.Destroy(pointer.GetComponent<Rigidbody>());
                        UnityEngine.Object.Destroy(pointer.GetComponent<SphereCollider>());
                        pointer.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                        pointer.GetComponent<Renderer>().material = new Material(Shader.Find("GUI/Text Shader"));
                        pointer.GetComponent<Renderer>().material.color = beamColour;
                    }
                    LayerMask combinedLayerMask = GorillaLocomotion.GTPlayer.Instance.locomotionEnabledLayers | 16384;
                    Physics.Raycast(GorillaLocomotion.GTPlayer.Instance.rightControllerTransform.position - GorillaLocomotion.GTPlayer.Instance.rightControllerTransform.up, -GorillaLocomotion.GTPlayer.Instance.rightControllerTransform.up, out raycastHit, float.PositiveInfinity, combinedLayerMask);
                    pointer.transform.position = raycastHit.point;
                    vrrigComponent = raycastHit.collider.GetComponentInParent<VRRig>();

                    if (Controls.RightTrigger())
                    {
                        if (vrrigComponent != null)
                        {
                            pointer.GetComponent<Renderer>().material.color = Color.red;
                            if (!LeftHandMonkeyMap.ContainsKey(vrrigComponent) || !RightHandMonkeyMap.ContainsKey(vrrigComponent))
                            {
                                AssignMonkeys(vrrigComponent);
                            }
                        }
                    }
                    else
                        pointer.GetComponent<Renderer>().material.color = beamColour;


                    UpdateMonkeyPositions();
                }
            }
            else
            {
                Destroy(this.GetComponent<SSPlatforms>());
            }
        }

        private void AssignMonkeys(VRRig vrrig)
        {
            if (MonkeyeAIs.Count >= 2)
            {
                // Assign monkeys for left and right hands if available
                if (!LeftHandMonkeyMap.ContainsKey(vrrig))
                {
                    GameObject leftMonkey = GetNextAvailableMonkey(AvailableLeftHandMonkeys);
                    LeftHandMonkeyMap[vrrig] = leftMonkey;
                }

                if (!RightHandMonkeyMap.ContainsKey(vrrig))
                {
                    GameObject rightMonkey = GetNextAvailableMonkey(AvailableRightHandMonkeys);
                    RightHandMonkeyMap[vrrig] = rightMonkey;
                }
            }
        }

        private GameObject GetNextAvailableMonkey(List<GameObject> availableMonkeys)
        {
            if (availableMonkeys.Count > 0)
            {
                GameObject monkey = availableMonkeys[0];
                availableMonkeys.RemoveAt(0); // Remove from available list
                return monkey;
            }
            else
            {
                Debug.LogError("No available monkeys left!");
                return null;
            }
        }

        private void UpdateMonkeyPositions()
        {
            foreach (var entry in LeftHandMonkeyMap)
            {
                var vrrig = entry.Key;
                var monkey = entry.Value;

                if (vrrig != null && monkey != null)
                {
                    if (vrrig.IsMakingFistLeft())
                    {
                        monkey.transform.position = vrrig.leftHandPlayer.transform.position;
                    }
                }
            }

            foreach (var entry in RightHandMonkeyMap)
            {
                var vrrig = entry.Key;
                var monkey = entry.Value;

                if (vrrig != null && monkey != null)
                {
                    if (vrrig.IsMakingFistRight())
                    {
                        monkey.transform.position = vrrig.rightHandPlayer.transform.position;
                    }
                }
            }
        }

        private void AddMonkeyeAIToList(string monkeyePath)
        {
            GameObject monkeye = GameObject.Find(monkeyePath);
            if (monkeye != null && !MonkeyeAIs.Contains(monkeye))
            {
                MonkeyeAIs.Add(monkeye);
                monkeye.GetComponent<MonkeyeAI>().enabled = false;

                // Add to available lists initially
                AvailableLeftHandMonkeys.Add(monkeye);
                AvailableRightHandMonkeys.Add(monkeye);
            }
        }

        public void ClearAllMonkeys()
        {
            // Clear all assigned monkeys and make them available again
            LeftHandMonkeyMap.Clear();
            RightHandMonkeyMap.Clear();

            AvailableLeftHandMonkeys.Clear();
            AvailableRightHandMonkeys.Clear();

            foreach (var monkey in MonkeyeAIs)
            {
                AvailableLeftHandMonkeys.Add(monkey);
                AvailableRightHandMonkeys.Add(monkey);
            }
        }
    }

}