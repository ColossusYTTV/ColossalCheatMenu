﻿using Colossal.Menu;
using Colossal.Patches;
using ExitGames.Client.Photon;
using GorillaExtensions;
using HarmonyLib;
using Photon.Pun;
using Photon.Realtime;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.XR;
using Valve.VR;

namespace Colossal.Mods
{
    public class SnowBallGun : MonoBehaviour
    {
        private GameObject pointer;
        private LineRenderer radiusLine;
        private Material lineMaterial = new Material(Shader.Find("GUI/Text Shader"));

        private static Coroutine DisableCoroutine;

        public static SnowballThrowable[] snowballs = new SnowballThrowable[] { };
        public static Dictionary<string, SnowballThrowable> snowballDict = null;
        public void Update()
        {
            if (PluginConfig.snowballgun && PhotonNetwork.InRoom)
            {
                string bind = CustomBinding.GetBinds("snowballgun");
                if (string.IsNullOrEmpty(bind) || bind == "UNBOUND")
                {
                    return;
                }

                if (ControlsV2.GetControl(bind))
                {
                    SpawnSnowball(GorillaTagger.Instance.rightHandTransform.position, GorillaTagger.Instance.rightHandTransform.transform.forward * 10 * 5f, 5f, 0);
                }
            }
            else
            {
                UnityEngine.Object.Destroy(this.GetComponent<SnowBallGun>());
            }
        }

        public static void SpawnSnowball(Vector3 Pos, Vector3 Vel, float Scale, int Mode, Player Target = null, bool NetworkSize = true, int customNetworkedSize = -1)
        {
            try
            {
                try
                {
                    GetProjectile("LMACF. RIGHT.").SetSnowballActiveLocal(true);
                }
                catch { }

                Vel = Vel.ClampMagnitudeSafe(50f);

                bool isTooFar = Vector3.Distance(Pos, GorillaTagger.Instance.bodyCollider.transform.position) > 3.5f;
                if (isTooFar)
                {
                    VRRig.LocalRig.enabled = false;
                    VRRig.LocalRig.transform.position = Pos + new Vector3(0f, Vel.y > 0f ? -3f : 3f, 0f);
                }

                GrowingSnowballThrowable GrowingSnowball = GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/RigAnchor/rig/body/shoulder.R/upper_arm.R/forearm.R/hand.R/palm.01.R/TransferrableItemRightHand/GrowingSnowballRightAnchor(Clone)/LMACF. RIGHT.").GetComponent<GrowingSnowballThrowable>();
                PhotonEvent Event = (PhotonEvent)Traverse.Create(GrowingSnowball).Field("snowballThrowEvent").GetValue();

                if (NetworkSize)
                {
                    PhotonEvent Event2 = (PhotonEvent)Traverse.Create(GrowingSnowball).Field("changeSizeEvent").GetValue();
                    Event2.RaiseAll(customNetworkedSize > 0 ? customNetworkedSize : (int)Scale);
                }

                switch (Mode)
                {
                    case 0:
                        Event.RaiseAll(Pos, Vel, Scale);
                        break;
                    case 1:
                        Event.RaiseOthers(Pos, Vel, Scale);
                        break;
                    case 2:
                        PhotonNetwork.RaiseEvent(176, new object[]
                        {
                            (int)Traverse.Create(Event).Field("_eventId").GetValue(),
                            Pos,
                            Vel,
                            Scale
                        }, new RaiseEventOptions
                        {
                            TargetActors = new int[] { Target.ActorNumber }
                        }, new SendOptions
                        {
                            Reliability = false,
                            Encrypt = true
                        });
                        break;
                }
                RPCProtection.SkiddedRPCProtection();
            }
            catch { }
        }
        public static SnowballThrowable GetProjectile(string provided)
        {
            if (snowballDict == null)
            {
                snowballDict = new Dictionary<string, SnowballThrowable>();

                snowballs = UnityEngine.Object.FindObjectsOfType<SnowballThrowable>(true);
                foreach (SnowballThrowable lol in snowballs)
                {
                    try
                    {
                        if (GetFullPath(lol.transform.parent).ToLower() == "player objects/local vrrig/local gorilla player/holdables" || GetFullPath(lol.transform.parent).ToLower().Contains("player objects/local vrrig/local gorilla player/riganchor/rig/body/shoulder.l/upper_arm.l/forearm.l/hand.l/palm.01.l/transferrableitemlefthand") || GetFullPath(lol.transform.parent).ToLower().Contains("player objects/local vrrig/local gorilla player/riganchor/rig/body/shoulder.r/upper_arm.r/forearm.r/hand.r/palm.01.r/transferrableitemrighthand"))
                        {
                            UnityEngine.Debug.Log("Projectile " + lol.gameObject.name + " logged");
                            snowballDict.Add(lol.gameObject.name, lol);
                        }
                    }
                    catch { }
                }
                if (snowballDict.Count < 18)
                {
                    UnityEngine.Debug.Log("Projectile dictionary unfinished (" + snowballDict.Count + "/18)");
                    snowballDict = null;
                }
            }
            if (snowballDict != null && snowballDict.ContainsKey(provided))
            {
                return snowballDict[provided];
            }
            else
            {
                UnityEngine.Debug.Log("No key found for " + provided);
                return null;
            }
        }
        private static IEnumerator DisableSnowball(bool rigDisabled)
        {
            yield return new WaitForSeconds(0.3f);

            if (rigDisabled)
                VRRig.LocalRig.enabled = true;
            GetProjectile("LMACF. RIGHT.").SetSnowballActiveLocal(false);
        }
        public static string GetFullPath(Transform transform)
        {
            string path = "";
            while (transform.parent != null)
            {
                transform = transform.parent;
                if (path == "")
                {
                    path = transform.name;
                }
                else
                {
                    path = transform.name + "/" + path;
                }
            }
            return path;
        }
    }
}
