//using Colossal.Menu;
//using Colossal.Patches;
//using GorillaExtensions;
//using GorillaLocomotion.Gameplay;
//using HarmonyLib;
//using Photon.Pun;
//using System.Collections;
//using System.Collections.Generic;
//using System.Linq;
//using UnityEngine;

//namespace Colossal.Mods
//{
//    public class SpazAllRopes : MonoBehaviour
//    {
//        private const float ROPE_UPDATE_DELAY = 0.125f;
//        private const float ROPE_RANDOM_REFRESH = 0.5f;
//        private const float MAX_VELOCITY_MAGNITUDE = 100f;
//        private const float MIN_NODE_DISTANCE = 5f;
//        private const int SKIP_NODES = 3;

//        private static float s_nextRopeUpdate;
//        private static float s_nextRandomRopeRefresh;
//        private static GorillaRopeSwing s_randomRope;
//        private static Coroutine s_ropeCoroutine;
//        private static System.Reflection.FieldInfo s_ropesField;

//        private RopeSwingManager ropeManager;
//        private GorillaTagger tagger;

//        private void Start()
//        {
//            // Cache singletons
//            ropeManager = RopeSwingManager.instance;
//            tagger = GorillaTagger.Instance;

//            // Cache reflection field once
//            if (s_ropesField == null)
//                s_ropesField = AccessTools.Field(typeof(RopeSwingManager), "ropes");
//        }

//        private void Update()
//        {
//            if (!PluginConfig.spazallropes)
//            {
//                Destroy(this);
//                return;
//            }

//            if (Time.time < s_nextRopeUpdate || ropeManager == null || tagger == null)
//                return;

//            s_nextRopeUpdate = Time.time + ROPE_UPDATE_DELAY;

//            GorillaRopeSwing rope = GetRandomRope();
//            if (rope != null)
//                SetRopeVelocity(rope.ropeId, GenerateRandomVector3(MAX_VELOCITY_MAGNITUDE));
//        }

//        private void SetRopeVelocity(int ropeId, Vector3 velocity)
//        {
//            // Clamp velocity once
//            velocity = velocity.ClampMagnitudeSafe(MAX_VELOCITY_MAGNITUDE);

//            var ropes = GetRopes();
//            if (!ropes.TryGetValue(ropeId, out GorillaRopeSwing rope))
//                return;

//            // Find closest node, skipping first few
//            var closestNode = rope.nodes
//                .Skip(SKIP_NODES)
//                .Select((node, index) => new
//                {
//                    Index = index,
//                    Transform = node,
//                    Distance = Vector3.Distance(tagger.bodyCollider.transform.position, node.transform.position)
//                })
//                .OrderBy(x => x.Distance)
//                .FirstOrDefault();

//            if (closestNode == null)
//                return;

//            if (closestNode.Distance > MIN_NODE_DISTANCE)
//            {
//                // Reset coroutine if running
//                if (s_ropeCoroutine != null)
//                    StopCoroutine(s_ropeCoroutine);

//                s_ropeCoroutine = StartCoroutine(EnableRigAfterDelay());

//                if (tagger.offlineVRRig.enabled)
//                    tagger.offlineVRRig.enabled = false;

//                tagger.offlineVRRig.transform.position = closestNode.Transform.position;
//            }

//            if (Vector3.Distance(tagger.offlineVRRig.transform.position, closestNode.Transform.position) < MIN_NODE_DISTANCE)
//                ropeManager.SendSetVelocity_RPC(ropeId, closestNode.Index, velocity, true);
//            else
//                s_nextRopeUpdate = 0f;

//            RPCProtection.SkiddedRPCProtection();
//        }

//        private GorillaRopeSwing GetRandomRope()
//        {
//            if (Time.time < s_nextRandomRopeRefresh && s_randomRope != null)
//                return s_randomRope;

//            s_nextRandomRopeRefresh = Time.time + ROPE_RANDOM_REFRESH;

//            var ropes = GetRopes();
//            if (ropes.Count == 0)
//                return null;

//            // O(1) random selection
//            int randomIndex = UnityEngine.Random.Range(0, ropes.Count);
//            s_randomRope = ropes.Values.ElementAtOrDefault(randomIndex);
//            return s_randomRope;
//        }

//        private IEnumerator EnableRigAfterDelay()
//        {
//            yield return new WaitForSeconds(0.3f);
//            if (tagger != null && !tagger.offlineVRRig.enabled)
//                tagger.offlineVRRig.enabled = true;
//        }

//        private Dictionary<int, GorillaRopeSwing> GetRopes()
//        {
//            if (ropeManager == null || s_ropesField == null)
//                return new Dictionary<int, GorillaRopeSwing>();
//            return (Dictionary<int, GorillaRopeSwing>)s_ropesField.GetValue(ropeManager);
//        }

//        private static Vector3 GenerateRandomVector3(float range)
//        {
//            return new Vector3(
//                UnityEngine.Random.Range(-range, range),
//                UnityEngine.Random.Range(-range, range),
//                UnityEngine.Random.Range(-range, range)
//            );
//        }

//        private void OnDestroy()
//        {
//            // Cleanup coroutine
//            if (s_ropeCoroutine != null)
//                StopCoroutine(s_ropeCoroutine);
//            s_ropeCoroutine = null;
//        }
//    }
//}