﻿using Colossal.Menu;
using Colossal.Patches;
using GorillaExtensions;
using GorillaNetworking;
using GorillaTagScripts;
using Pathfinding;
using Photon.Pun;
using Photon.Voice.Unity;
using Photon.Voice.Unity.UtilityScripts;
using POpusCodec.Enums;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.XR;

namespace Colossal.Mods
{
    public class ParticleSpam : MonoBehaviour
    {
        GREnemyChaser[] GREntity;
        GRReviveStation GRRevive;

        private float antikick = 0;
        public void Update()
        {
            if (!PluginConfig.particlespam)
            {
                Destroy(this.GetComponent<ParticleSpam>());
            }

            if (PhotonNetwork.InRoom && GhostReactorManager.instance != null)
            {
                if (GREntity == null)
                {
                    GREntity = Resources.FindObjectsOfTypeAll<GREnemyChaser>();
                    return;
                }
                if (GRRevive == null)
                {
                    GRRevive = GameObject.Find("GhostReactorRoot/GhostReactorZone/GRReviveStation").GetComponent<GRReviveStation>();
                    return;
                }

                if (PhotonNetwork.LocalPlayer.IsMasterClient && GRRevive != null && GREntity != null && GREntity.Length > 0 && Time.time > antikick)
                {
                    antikick = Time.time + 0.1f;

                    if (!GhostReactorManager.instance.reactor.shiftManager.ShiftActive)
                        GhostReactorManager.instance.RequestShiftStart();

                    GhostReactorManager.instance.RequestEnemyHitPlayer(GhostReactor.EnemyType.Chaser, GREntity[0].entity.id, GRPlayer.Get(PhotonNetwork.LocalPlayer.ActorNumber), VRRig.LocalRig.transform.position);
                    GhostReactorManager.instance.RequestPlayerRevive(GRRevive, GRPlayer.Get(PhotonNetwork.LocalPlayer.ActorNumber));

                    RPCProtection.SkiddedRPCProtection();
                }
            }
        }
    }
}
