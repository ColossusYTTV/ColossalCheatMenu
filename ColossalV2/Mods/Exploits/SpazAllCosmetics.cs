using Colossal.Menu;
using Colossal.Patches;
using ExitGames.Client.Photon;
using GorillaNetworking;
using GorillaTagScripts;
using HarmonyLib;
using Photon.Pun;
using Photon.Realtime;
using Photon.Voice.Unity;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Colossal.Mods
{
    public class SpazAllCosmeics : MonoBehaviour
    {
        private Coroutine spamCoroutine; // Track the currently running coroutine
        private bool isSpamming; // Track if we are currently spamming cosmetics

        public void Update()
        {
            if (PhotonNetwork.IsConnectedAndReady)
            {
                if (PluginConfig.spazallcosmetics)
                {
                    if (!isSpamming)
                    {
                        isSpamming = true; // Set the flag to indicate we are spamming
                        spamCoroutine = StartCoroutine(SpamAllCosmeticsCoroutine());
                    }
                    RPCProtection.SkiddedRPCProtection();
                }
                else
                {
                    StopSpamming(); // Stop spamming when the config is turned off
                    Destroy(this.GetComponent<SpazAllCosmeics>());
                }
            }
        }

        private IEnumerator SpamAllCosmeticsCoroutine()
        {
            CosmeticsController cosmeticsController = CosmeticsController.instance;

            if (cosmeticsController == null)
            {
                Debug.Log("[COLOSSAL] CosmeticsController instance not found.");
                isSpamming = false;
                yield break;
            }

            var categories = (CosmeticsController.CosmeticCategory[])System.Enum.GetValues(typeof(CosmeticsController.CosmeticCategory));

            while (isSpamming) // Keep looping while spamming is active
            {
                foreach (var category in categories)
                {
                    int categorySize = cosmeticsController.GetCategorySize(category);

                    // Try to select a cosmetic from the current category
                    if (categorySize > 0)
                    {
                        int randomIndex = Random.Range(0, categorySize);
                        var selectedCosmetic = cosmeticsController.GetCosmetic(category, randomIndex);

                        // Check if the selected cosmetic is valid
                        if (!selectedCosmetic.isNullItem)
                        {
                            cosmeticsController.PressWardrobeItemButton(selectedCosmetic, false);
                            //Debug.Log($"Trying on cosmetic from {category}: {selectedCosmetic.itemName}");

                            yield return new WaitForSeconds(0.1f); // Adjust this delay to prevent kick
                        }
                    }
                }
            }

            isSpamming = false; // Reset the flag after stopping
        }

        private void StopSpamming()
        {
            if (spamCoroutine != null)
            {
                StopCoroutine(spamCoroutine);
                spamCoroutine = null;
            }
            isSpamming = false; // Reset the flag
        }
    }
}
